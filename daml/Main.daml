module Main where

import qualified Daml.Script as S
import Daml.Trigger
import DA.Foldable (forA_)
import qualified DA.Optional as Optional
import qualified DA.Map as Map
import DA.Functor (void)

template Cat
  with
    owner : Party
    isin : Int
  where
    signatory owner
    key this : Cat
    maintainer key.owner

    choice Feed : ()
      with
       foodCid : ContractId Food
      controller owner
      do
        exercise foodCid Food_FeedCat

template Food
  with
    owner : Party
    isin : Int
  where
    signatory owner
    key this : Food
    maintainer key.owner

    choice Food_FeedCat : ()
      controller owner
      do
        pure ()

template Counter
  with
    owner: Party
    id: Text
    i: Int
  where
    signatory owner
    key (owner, id) : (Party, Text)
    maintainer key._1
    choice CounterUpdate : ()
      with j : Int
        controller owner
        do
          create $ this with i = j
          pure ()

template Lock
  with
    owner: Party
  where
    signatory owner
    key owner : Party
    maintainer key

template Helper
  with
    owner: Party
  where
    signatory owner

    choice Cats: ()
      controller owner
      do
        forA_ (ints n) \i -> do
          l <- lookupByKey @Cat (Cat owner i)
          case l of
            None -> void $ create (Cat owner i)
            Some _ -> pure ()

    choice Foods: ()
      controller owner
       do
        forA_ (ints n) \i -> do
          l <- lookupByKey @Food (Food owner i)
          case l of
            None -> void $ create (Food owner i)
            Some _ -> pure ()

    choice Eat: ()
      with i : Int
      controller owner
      do
        r <- lookupByKey @Food (Food owner i)
        case r of
          None -> pure ()
          Some _ -> do
            exerciseByKey @Food (Food owner i) Archive

    choice EatAll: ()
      controller owner
      do
        forA_ (ints n) \i ->  do

          r <- lookupByKey @Food (Food owner i)
          case r of
            None -> pure ()
            Some _ ->
              do
                exerciseByKey @Food (Food owner i) Archive

trigger : Trigger Int
trigger = Trigger
  { initialize = pure 0
  , updateState = countTransaction
  , rule = feedTheCats
  , registeredTemplates =  RegisteredTemplates [ registeredTemplate @Cat, registeredTemplate @Food, registeredTemplate @Lock ]
  , heartbeat = None
  }

limit = 10
n = limit * 10

ints : Int -> [Int]
ints 0 = []
ints n = n :: ints (n - 1)

skipIfTooManyCommandsInFlight: a -> (TriggerA s a) -> (TriggerA s a)
skipIfTooManyCommandsInFlight otherwise action  = do
  cs <- getCommandsInFlight
  if Map.size cs >= limit then
    pure otherwise
  else
    action

skipIfLock: a -> (TriggerA s a) -> (TriggerA s a)
skipIfLock otherwise action = do
  locks <- query @Lock
  if (length locks > 0) then
    pure otherwise
  else
    action

countTransaction: Message -> TriggerUpdateA Int ()
countTransaction (MTransaction _) = do
  i <- get
  debugRaw $ "Saw a total of " <> show (i+1) <> " transactions until now"
  put (i+1)
countTransaction _ = pure ()

feedTheCats: Party -> TriggerA s ()
feedTheCats _ = do
  cats <- query @Cat
  locks <- query @Lock
  cs <- getCommandsInFlight
  debugRaw $ "Feeding " <> show (length cats) <> " cats (" <> show (Map.size cs) <>  ")"
  skipIfLock () $
    skipIfTooManyCommandsInFlight () $ do
      forA_ cats \(catCid, Cat{..}) -> do
        queryContractKey @Food (Food owner isin) >>= \case
          Some (foodCid, _) ->
            void $ emitCommands [exerciseCmd catCid (Feed foodCid)] [toAnyContractId catCid, toAnyContractId foodCid]
          None ->
            pure ()


setup : S.Script ()
setup = S.script do
-- user_setup_begin
  alice <- S.allocatePartyWithHint "Alice" (S.PartyIdHint "Alice")
  aliceId <- S.validateUserId "alice"
  _ <- S.createUser (S.User aliceId (Some alice)) [S.CanActAs alice]
  init

string2Party party =  do
   userId <- S.validateUserId party
   user <- S.getUser userId
   pure $ Optional.fromSome user.primaryParty

init : S.Script ()
init = do
  alice <- string2Party "alice"
--  _ <- S.submit alice $ S.createCmd $ Lock alice
  _ <- S.submit alice $ S.createAndExerciseCmd (Helper alice) Cats
  _ <- S.submit alice $ S.createAndExerciseCmd (Helper alice) Foods
  pure ()

eatAll : S.Script ()
eatAll = S.script do
  alice  <- string2Party "alice"
--  _ <-  S.submit alice $ S.exerciseByKeyCmd @Lock alice Archive
  forA_ (ints n) \i ->  do
    S.submit alice $ S.createAndExerciseCmd (Helper alice) (Eat i)
