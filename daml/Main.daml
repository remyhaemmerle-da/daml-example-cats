module Main where

import qualified Daml.Script as S
import Daml.Trigger
import DA.Foldable (forA_)
import qualified DA.Optional as Optional
import qualified DA.Map as Map
import DA.Functor (void)
import DA.Time

template Cat
  with
    owner : Party
    isin : Int
  where
    signatory owner
    key this : Cat
    agreement "is not empty"
    maintainer key.owner

    choice Feed : ()
      with
       foodCid : ContractId Food
      controller owner
      do
        exercise foodCid Food_FeedCat

template Food
  with
    owner : Party
    isin : Int
  where
    signatory owner
    key this : Food
    maintainer key.owner

    choice Food_FeedCat : ()
      controller owner
      do
        pure ()

template Lock
  with
    owner: Party
  where
    signatory owner
    key owner : Party
    maintainer key

skipIfLock: a -> (TriggerA s a) -> (TriggerA s a)
skipIfLock otherwise action = do
  locks <- query @Lock
  if (length locks > 0) then
    pure otherwise
  else
    action

-- Naive implementation

feedTheCats: Party -> TriggerA s ()
feedTheCats _ = do
  cats <- query @Cat
  foods <- query @Food
  locks <- query @Lock
  cs <- getCommandsInFlight
  debugRaw $ "Feeding " <> show (length cats) <> " cats with " <> show (length foods) <> " foods (" <> show (Map.size cs) <>  ")"
  skipIfLock () $
    forA_ cats \(catCid, Cat{..}) -> do
      queryContractKey @Food (Food owner isin) >>= \case
        Some (foodCid, _) ->
          void $ emitCommands [exerciseCmd catCid (Feed foodCid)] [toAnyContractId catCid, toAnyContractId foodCid]
        None ->
          pure ()

trigger : Trigger ()
trigger = Trigger
  { initialize = pure ()
  , updateState = const $ debugRaw $ "message recieved"
  , rule = feedTheCats
  , registeredTemplates =  RegisteredTemplates [ registeredTemplate @Cat, registeredTemplate @Food, registeredTemplate @Lock ]
  , heartbeat = None
  }

-- IMPROVMENT I
-- limit the number of inflight commands

maximalNumberOfInflightCommands = 100

skipIfTooManyCommandsInFlight: a -> (TriggerA s a) -> (TriggerA s a)
skipIfTooManyCommandsInFlight otherwise action  = do
  cs <- getCommandsInFlight
  if Map.size cs >= maximalNumberOfInflightCommands then
    pure otherwise
  else
    action

emitCommands' c p = skipIfTooManyCommandsInFlight () $ void $ emitCommands c p

feedTheCats1: Party -> TriggerA s ()
feedTheCats1 _ = do
  cats <- query @Cat
  foods <- query @Food
  locks <- query @Lock
  cs <- getCommandsInFlight
  debugRaw $ "Feeding " <> show (length cats) <> " cats with " <> show (length foods) <> " foods (" <> show (Map.size cs) <>  ")"
  skipIfLock () $
    forA_ cats \(catCid, Cat{..}) -> do
      queryContractKey @Food (Food owner isin) >>= \case
        Some (foodCid, _) ->
          void $ emitCommands' [exerciseCmd catCid (Feed foodCid)] [toAnyContractId catCid, toAnyContractId foodCid]
        None ->
          pure ()

trigger1 : Trigger ()
trigger1 = trigger with { rule = feedTheCats1 }

-- IMPROVMENT II
-- shortcut the rule if too many inflight commands

for_ : [a] -> (a -> TriggerA c b) -> TriggerA c ()
for_ (h :: t) f =
  skipIfTooManyCommandsInFlight () $ do
      f h
      for_ t f
for_ _ _ = pure ()

feedTheCats2: Party -> TriggerA s ()
feedTheCats2 _ = do
  cats <- query @Cat
  foods <- query @Food
  locks <- query @Lock
  cs <- getCommandsInFlight
  debugRaw $ "Feeding " <> show (length cats) <> " cats with " <> show (length foods) <> " foods (" <> show (Map.size cs) <>  ")"
  skipIfLock () $
    for_ cats \(catCid, Cat{..}) -> do
      queryContractKey @Food (Food owner isin) >>= \case
        Some (foodCid, _) ->
          void $ emitCommands' [exerciseCmd catCid (Feed foodCid)] [toAnyContractId catCid, toAnyContractId foodCid]
        None ->
          pure ()


trigger2 : Trigger ()
trigger2 = trigger with { rule = feedTheCats2 }

-- IMPROVMENT III
-- backoff if receive failure

data BackoffState =
    Failure          -- we just receive a failure
  | WaitUntil Time   --
  | OK               --

delay = seconds 2

adaptRule:  (Party -> TriggerA BackoffState ()) -> Party -> TriggerA BackoffState ()
adaptRule rule party =
  get >>= \case
    Failure -> do
      t <- getTime
      let until = t `addRelTime` delay in do
      debugRaw $ "We just recieved a failure: we will wait until " <> (show until) <> " before triggering the rule again"
      put $ WaitUntil $ until
    WaitUntil until -> do
      t <- getTime
      if (t <= until) then
        debugRaw $ "We did not reach the backoff time limit: we skip the rule application"
      else do
        rule party
        put OK
    OK ->
      rule party

updateBackoffState: Message -> TriggerUpdateA BackoffState ()
updateBackoffState (MCompletion (Completion _ Failed {})) = do
  debugRaw $  "we recieved failure completion"
  put Failure
updateBackoffState (MCompletion _) = debugRaw $ "we recieved sucess completion"
updateBackoffState MHeartbeat = debugRaw $ "we recieve a heartbeat"
updateBackoffState (MTransaction _) = debugRaw $ "we recieve a transaction"

trigger3 : Trigger BackoffState
trigger3 = Trigger {
    initialize = pure OK
  , updateState = updateBackoffState
  , rule = adaptRule feedTheCats2
  , registeredTemplates = trigger.registeredTemplates
  , heartbeat = Some (seconds 20)
  }

-- SETUP AND HELPER

n = 500 -- number of cats

ints : Int -> [Int]
ints 0 = []
ints n = n :: ints (n - 1)

template Helper
  with
    owner: Party
  where
    signatory owner

    choice LockIfNeeded: ()
      controller owner
      do
        lookupByKey @Lock owner >>= \case
          None -> void $ create (Lock owner)
          Some cid -> pure ()


    choice Cats: ()
      controller owner
      do
        forA_ (ints n) \i -> do
          lookupByKey @Cat (Cat owner i) >>= \case
            None -> void $ create (Cat owner i)
            Some _ -> pure ()

    choice Foods: ()
      controller owner
       do
        forA_ (ints n) \i -> do
          lookupByKey @Food (Food owner i) >>= \case
            None -> void $ create (Food owner i)
            Some _ -> pure ()

    choice Eat: ()
      with i : Int
      controller owner
      do
        lookupByKey @Food (Food owner i) >>= \case
          None -> pure ()
          Some cid -> archive cid

    choice EatAll: ()
      controller owner
      do
        forA_ (ints n) \i ->
          lookupByKey @Food (Food owner i) >>= \case
            None -> pure ()
            Some cid -> archive cid

    choice Unlock: ()
      controller owner
      do
        lookupByKey @Lock owner >>= \case
          None -> pure ()
          Some cid -> archive cid

setup : S.Script ()
setup = S.script do
-- user_setup_begin
  alice <- S.allocatePartyWithHint "Alice" (S.PartyIdHint "Alice")
  aliceId <- S.validateUserId "alice"
  S.createUser (S.User aliceId (Some alice)) [S.CanActAs alice]
  init

string2Party party =  do
   userId <- S.validateUserId party
   user <- S.getUser userId
   pure $ Optional.fromSome user.primaryParty

init : S.Script ()
init = do
  alice <- string2Party "alice"
  S.submit alice $ S.createAndExerciseCmd (Helper alice) LockIfNeeded
  S.submit alice $ S.createAndExerciseCmd (Helper alice) Cats
  S.submit alice $ S.createAndExerciseCmd (Helper alice) Foods
  pure ()

eatAll : S.Script ()
eatAll = S.script do
  alice  <- string2Party "alice"
  S.submit alice $ S.createAndExerciseCmd (Helper alice) Unlock
  forA_ (ints n) \i ->  do
    S.submit alice $ S.createAndExerciseCmd (Helper alice) (Eat i)
